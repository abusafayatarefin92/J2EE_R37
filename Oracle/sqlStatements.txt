Selecting All Columns:
select * 
from departments;
=================================================================
Selecting Specific Columns:
select department_id, location_id 
from departments;

select location_id, department_id 
from departments;
==================================================================
Column Heading Defaults:
select last_name, hire_date, salary 
from employees;
=================================================================
User Arithmetic Operators:
select last_name, salary, salary + 300 
from employees;
=================================================================
Operators Precedence:
select last_name, salary, 12 * salary + 100 
from employees;

select last_name, salary, 12 * (salary + 100) 
from employees;
==================================================================
Defining a Null Value:
select last_name, job_id, salary, commission_pct 
from employees;
==================================================================
Null Values in Arithmetic Expressions:
select last_name, 12 * salary * commission_pct 
from employees;
===================================================================
Using Column Aliases:
select last_name AS name, commission_pct comm 
from employees;

select last_name AS "Name", salary * 12 "Annual Salary" 
from employees;
====================================================================
Concatenation Operators:
select last_name||job_id AS "Employees" 
from employees;
=======================================================================
Using Literal Character Strings:
select last_name ||' is a '||job_id AS "Employees Details" 
from employees;

select last_name ||': 1 Month salary = '||salary Monthly 
from employees;
==========================================================================
Alternative Quote (q) Operator:
select department_name ||q' [, it's assigned Manager Id: ] '|| manager_id AS "Department and Manager" 
from departments;
=========================================================================
Duplicate Rows:
select department_id 
from employees;

select DISTINCT department_id 
from employees;

select DISTINCT department_id, job_id 
from employees;
============================================================================
Using the Where Clause:
select employee_id,last_name,job_id,department_id 
from employees 
where department_id = 90;
============================================================================
Character Strings and Dates:
select last_name,job_id,department_id 
from employees 
where last_name = 'Whalen';
=============================================================================
Using Comparison Conditions:
select last_name, salary 
from employees 
where salary <= 3000;
============================================================================
Using the Between Condition:
select last_name, salary 
from employees 
where salary between 2500 and 3500;

select last_name, salary 
from employees 
where salary not between 2500 and 3500;

select last_name 
from employees 
where last_name between 'King' and 'Smith';
==============================================================================
Using the In Condition:
select employee_id, last_name, salary, manager_id 
from employees 
where manager_id in(100,101,201);

select employee_id, manager_id,department_id 
from employees 
where last_name in ('Hartstein', 'Vargas');

select employee_id, manager_id,department_id 
from employees 
where last_name not in ('Hartstein', 'Vargas');
==============================================================================
Using the Like Condition:
select first_name 
from employees 
where first_name like 'S%';

select last_name,hire_date 
from employees where hire_date like '%95';

select last_name from employees 
where last_name like '_o%';

select employee_id,last_name,job_id 
from employees 
where job_id like '%SA\_%' escape'\';

select last_name 
from employees 
where last_name not like '%een%';
================================================================================
Using the null Conditions:
select last_name,manager_id 
from employees 
where manager_id is null;

select last_name,job_id,commission_pct 
from employees 
where commission_pct is null;
===========================================================================
Using the And Operator:
select employee_id, last_name, job_id, salary 
from employees 
where salary  >= 10000 and job_id like '%MAN%';
=============================================================================
Using the Or Operator:
select employee_id, last_name, job_id, salary 
from employees 
where salary  >= 10000 or job_id like '%MAN%';
=================================================================================
Using the Not Operator:
select last_name, job_id 
from employees 
where job_id not in('IT_PROG', 'ST_CLERK', 'SA_REF');

select last_name, job_id 
from employees 
where job_id not in('AC_ACCOUNT', 'AD_VP');

select last_name, job_id 
from employees 
where salary not between 10000 and 15000;
=================================================================================
Rules of Precedence:
select last_name, job_id, salary 
from employees 
where job_id = 'SA_REP' or job_id = 'AD_PRES' and salary > 15000;

select last_name, job_id, salary 
from employees 
where (job_id = 'SA_REP' or job_id = 'AD_PRES') and salary > 15000;
====================================================================================
Using the Order By Clause:
select last_name, job_id, department_id, hire_date 
from employees 
order by hire_date;

Sorting
select last_name, job_id, department_id, hire_date 
from employees 
order by hire_date desc;

select employee_id, last_name, salary * 12 annsal 
from employees 
order by annsal;

select last_name, department_id, salary 
from employees 
order by department_id, salary desc;
========================================================================================
Using the & Substitution Variable:
select employee_id, last_name, salary, department_id 
from employees 
where employee_id = &employee_num;
=====================================================================================
Character and Data Values with Substitution Variables:
select last_name, department_id, salary*12 
from employees 
where job_id = '&job_title';
=================================================================================
Specifying Column Names, Expressions, and Text:
select employee_id, last_name, job_id, &column_name 
from employees where &condition 
order by &order_column;
=================================================================================
Using the && Substitution Variable:
select employee_id, last_name, job_id, &&column_name 
from employees 
order by &column_name;
==============================================================================
Case-Manipulation Functions:
select 'The job id for '||upper(last_name)||' is '||lower(job_id) as "EMPLOYEE DETAILS" 
from employees;
===============================================================================
Using Case-Manipulation Functions:
select employee_id, last_name, department_id 
from employees 
where last_name = 'higgins';

select employee_id, last_name, department_id 
from employees 
where lower(last_name) = 'higgins';

select employee_id, last_name, department_id 
from employees 
where last_name = 'Higgins';
=================================================================================
Character-Manipulation Functions:
select employee_id, salary, lpad(salary, 8, 'TK.') 
from employees;

select employee_id, salary, lpad(salary, 8, '*') 
from employees;

select employee_id, salary, rpad(salary, 8, '*') 
from employees;

select employee_id, salary, rpad(salary, 8, 'TK.') 
from employees;

select employee_id, first_name, replace(first_name, 'a', 'b') 
from employees;

select employee_id, first_name, trim('a' from first_name) 
from employees;

select employee_id, first_name, trim('A' from first_name) 
from employees;
==============================================================================
Using the Character-Manipulation Functions:
select employee_id, concat(first_name, last_name) Name, job_id, length (last_name), instr(last_name, 'a') "Contains 'a'?" 
from employees 
where substr(job_id, 4) = 'REP';

select employee_id, concat(first_name, last_name) Name, job_id, length (last_name), instr(last_name, 'a') "Contains 'a'?" 
from employees 
where substr(last_name, -1, 1) = 'n';
=================================================================================
Using the Round Function:
select round(45.923, 2), round(45.923, 0), round(45.923, -1) 
from dual;
==================================================================================
Using the Trunc Function:
select trunc(45.923, 2), trunc(45.923, 0), trunc(45.923, -1) 
from dual;
=================================================================================
Using the Mod Function:
select last_name, salary, mod(salary, 5000) 
from employees 
where job_id = 'SA_REP';
===============================================================================
Working with Dates:
select last_name, hire_date 
from employees 
where hire_date < '01-FEB-88';
===============================================================================
Using Arithmetic Operators with Dates:
select last_name, (sysdate-hire_date)/7 as weeks 
from employees 
where department_id = 90;
================================================================================
Working with Dates:
select last_name, hire_date 
from employees;

select last_name, hire_date 
from employees 
where hire_date > '02/07/2007';

select last_name, hire_date 
from employees 
where hire_date <= '02/07/2007';

select last_name, hire_date 
from employees 
where hire_date = '02/07/2007';

select sysdate 
from dual;

select sysdate + 6 
from dual;

select sysdate + 30 
from dual;

select sysdate - 30 
from dual;

select last_name, (sysdate - hire_date) / 7 as months, round((sysdate - hire_date) / 7) as months 
from employees;

select last_name, (sysdate - hire_date) / 30 as days, round((sysdate - hire_date) / 30) as days 
from employees;
==========================================================================
Using Date Functions:
select last_name, hire_date, months_between('06/17/2003', '08/16/2002') 
from employees;

select last_name, hire_date, add_months('06/17/2003', 9) 
from employees;

select last_name, hire_date, next_day('06/17/2003', 'friday') 
from employees;

select last_name, hire_date, last_day('06/17/2003') 
from employees;
===========================================================================
Using the To_Char Function with Dates:
select last_name, to_char(hire_date, 'MM/YY') MONTHS_HIRED 
from employees;

select last_name, to_char(hire_date, 'dd " of " month') MONTHS_HIRED 
from employees;

select last_name, to_char(hire_date, 'hh24:mi:ss am') MONTHS_HIRED 
from employees;
=============================================================================
Using the To_Char Function with Dates:
select last_name, to_char(hire_date, 'fmdd month yyyy') as HIREDATE 
from employees;

Using To_Char Function with Numbers
select last_name, to_char(salary * 100, '$99,99,999.00') SALARY 
from employees;
=============================================================================
Using the To_Number and To_Date Functions:
select last_name, hire_date 
from employees 
where hire_date = to_date('May 24, 2007', 'fmMonth dd, yyyy');
=============================================================================
RR Date Formate: Example:
select last_name, to_char(hire_date, 'dd-Mon-yyyy') 
from employees 
where hire_date < to_date('01-Jan-2008', 'dd-Mon-rr');

select last_name, to_char(hire_date, 'day/mon/yyyy') 
from employees 
where hire_date = to_date('Jun 17, 2003', 'fmMonth dd, yyyy');
==============================================================================
Nesting Functions:
select last_name, upper(concat(substr(last_name, 1, 3), '_US')) 
from employees 
where department_id = 60;

select last_name, substr(last_name, 1, 3), concat(substr(last_name, 1, 3), '_US'), upper(concat(substr(last_name, 1, 3), '_US')) 
from employees 
where department_id = 60;

select to_char(next_day(add_months(hire_date, 6), 'Friday'), 'fmDay, Month DDth, YYYY') "Next 6 Month Review" 
from employees 
order by hire_date;
=================================================================================
Using the NVL Function:
select last_name, salary, nvl(commission_pct, 0), (salary * 12) + (salary * 12 * nvl(commission_pct, 0)) AN_SAL 
from employees;

select last_name, salary, commission_pct, (salary * 12) + (salary * 12 * commission_pct) AN_SAL 
from employees;
===================================================================================
Using the NVL2 Function:
select last_name, salary, commission_pct, nvl2(commission_pct, 'SAL + COMM', 'SAL') income 
from employees where department_id in (50, 80);

select last_name, salary, commission_pct, nvl2(commission_pct, salary + commission_pct, salary) as TOTAL 
from employees where department_id in (50, 80);
======================================================================================
Using the NullIf Function:
select first_name, length(first_name) "expr1", last_name, length(last_name) "expr2", nullif(length(first_name), length(last_name)) result 
from employees;
=========================================================================================
Using the Case Expression:
select last_name, job_id, salary,
 case job_id when 'IT_PROG' then 1.10 * salary
  when 'IT_PROG' then 1.15 * salary
  when 'IT_PROG' then 1.20 * salary
 else salary end "revised_salary"
from employees;

select last_name, salary,
 (case when salary < 5000 then 'LOW'
       when salary < 10000 then 'MEDIUM'
       when salary < 20000 then 'GOOD'
       else 'EXCELLENT'
 end)qualified_salary
from employees;
==========================================================================================
Using the Decode Function:
select last_name, job_id, salary,
 decode (job_id, 'IT_PROG', 1.10 * salary,
   'ST_CLERK', 1.15 * salary,
   'SA_REP', 1.20 * salary, 
  salary)
 "revised_salary"
from employees;

select last_name, salary,
       decode(trunc(salary / 2000, 0),
                        0, 0.00,
                        1, 0.09,
                        2, 0.20,
                        3, 0.30,
                        4, 0.40,
                        5, 0.42,
                        6, 0.44,
                           0.45) tax_rate
from employees
where department_id = 80;
==============================================================================
Using the Avg and Sum Functions:
select round(avg(salary)), max(salary),
       min(salary), sum(salary)
from employees
where job_id like '%REP%';
==============================================================================
Using the Min and Max Functions:
select min(hire_date), max(hire_date)
from employees;

select min(last_name), max(last_name)
from employees;
==============================================================================
Using the Count function:
select count(*)
from employees
where department_id = 50;

select count(commission_pct)
from employees
where department_id = 80;
===============================================================================
Group Functions and Null Values:
select avg(commission_pct)
from employees;

select avg(nvl(commission_pct, 0))
from employees;
==============================================================================
Using the Group by Clause:
select department_id, avg(salary)
from employees
group by department_id;

select avg(salary)
from employees
group by department_id;

select department_id, avg(salary)
from employees
group by department_id
order by avg(salary);
================================================================================
Using the Group by Clause on Multiple Columns:
select department_id dept_id, job_id, sum(salary)
from employees
group by department_id, job_id;
================================================================================
Illigal Quaries Using Group Functions:
select department_id, count(last_name)
from employees;

select department_id, count(last_name)
from employees
group by department_id;

select department_id, avg(salary)
from employees
where avg(salary) > 8000
group by department_id;

select department_id, avg(salary)
from employees
having avg(salary) > 8000
group by department_id;
==================================================================================
Restricting Group Results with the Having Clause:
select department_id, max(salary)
from employees
group by department_id
having max(salary) > 10000;

select department_id, avg(salary)
from employees
group by department_id
having max(salary) > 10000;
===================================================================================
Using Having Clause:
select job_id, sum(salary) payroll
from employees
where job_id not like '%REP%'
group by job_id
having sum(salary) > 13000
order by sum(salary);
=====================================================================================
Nesting Group Functions:
select max(avg(salary))
from employees
group by department_id;
===================================================================================
Retrieving Records with Natural Joins:
select department_id, department_name, location_id, city
from departments
natural join locations;

select department_id, department_name, location_id, city
from departments
natural join locations 
where department_id in (20, 50);
======================================================================================
Creating Joins with the Using Clause:
select l.city, d.department_name
from locations l join departments d using (location_id)
where location_id  = 1400;

select l.city, d.department_name
from locations l join departments d using (location_id)
where d.location_id = 1400;
ORA-25154: column part of USING clause cannot have qualifier
=========================================================================================
Retrieving Records with the Using Clause:
select employees.employee_id, employees.last_name, departments.location_id, department_id
from employees join departments
using (department_id);
===========================================================================================
Qualifying Ambiguous Column Names:
select employees.employee_id, employees.last_name, departments.department_id, departments.location_id
from employees join departments
on employees.department_id = departments.department_id;
============================================================================================
Using Table Aliases:
select e.employee_id, e.last_name, d.location_id, department_id
from employees e join departments d 
using (department_id);
==========================================================================================
Retrieving Records with the On clause:
select e.employee_id, e.last_name, e.department_id, d.department_id, d.location_id
from employees e join departments d
on (e.department_id = d.department_id);
===========================================================================================
Self-joins Using the On Clause:
select e.last_name emp, m.last_name  mgr
from employees e join employees m
on (e.manager_id = m.employee_id);
==========================================================================================
Applying Additional Additional Conditions to a Join:
select e.employee_id, e.last_name, e.department_id, d.department_id, d.location_id
from employees e join departments d
on (e.department_id = d.department_id)
and e.manager_id = 149;

select e.employee_id, e.last_name, e.department_id, d.department_id, d.location_id
from employees e join departments d
on (e.department_id = d.department_id)
where e.manager_id = 149;
===========================================================================================
Creating Three-Way Joins with the On Clause:
select employee_id, city, department_name
from employees e
join departments d
on d.department_id = e.department_id 
join locations l
on d.location_id = l.location_id;
=======================================================================================
Retriving Records with Nonequijoins:
select e.last_name, e.salary, j.job_title
from employees e join jobs j
on e.salary between j.min_salary and j.max_salary;
====================================================================================
Left Outer Join:
select e.last_name, e.department_id, d.department_name
from employees e left outer join departments d
on (e.department_id = d.department_id);
=====================================================================================
Right Outer Join:
select e.last_name, e.department_id, d.department_name
from employees e right outer join departments d
on (e.department_id = d.department_id);
======================================================================================
Full Outer Join:
select e.last_name, e.department_id, d.department_name
from employees e full outer join departments d
on (e.department_id = d.department_id);
======================================================================================
Using Subquery:
select * 
from employees 
where salary > 
			  (select salary 
			   from employees 
			   where last_name = 'Abel');
			   
select last_name, salary 
from employees 
where salary > 
			  (select salary 
			   from employees 
			   where last_name = 'Abel');
===========================================================================================			   
Single-Row Subqueries:
select last_name, job_id
from employees where job_id =
							(select job_id
							 from employees
							 where employee_id = 141);
============================================================================================							 
Executing Single-Row Subqueries:
select last_name, job_id, salary 
from employees
where job_id =
              (select job_id 
               from employees
               where employee_id = 141)
and salary > (select salary 
              from employees
              where employee_id = 143);
=============================================================================================			  
Using Group Functions in a Subquery:
select last_name, job_id, salary 
from employees
where salary =
              (select min(salary)
               from employees);
			   
select * 
from employees 
where department_id =
                     (select department_id 
                      from employees 
                      where employee_id = 120);
=================================================================================================
